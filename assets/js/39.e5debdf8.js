(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{364:function(v,_,t){"use strict";t.r(_);var p=t(4),l=Object(p.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("blockquote",[_("p",[v._v("迎面走来了你的面试官，身穿格子衫，挺着啤酒肚，发际线严重后移的中年男子。\n手拿泡着枸杞的保温杯，胳膊夹着MacBook，MacBook上还贴着公司标语：“我爱加班”。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img2022.cnblogs.com/blog/734446/202206/734446-20220623214420080-762920132.jpg",alt:""}})]),v._v(" "),_("p",[v._v("面试开始，直入正题。")]),v._v(" "),_("p",[_("strong",[v._v("面试官：")]),v._v(" 你知道MySQL索引底层数据结构为啥用B+树？而不用B树、红黑树或者普通二叉树？")]),v._v(" "),_("p",[_("strong",[v._v("我：")]),v._v(" 这事谁知道作者咋想的？他可能是用B+树习惯了，个人爱好吧。")]),v._v(" "),_("p",[_("strong",[v._v("面试官：")]),v._v(" 你倒是挺看得开。今天的面试就先到这吧，后面有消息会主动联系你。")]),v._v(" "),_("blockquote",[_("p",[v._v("后面还可能有消息吗？你们啥时候主动联系过我？\n实话实说的被拒，八股文背得溜反而被录取。\n好吧，等我看看一灯怎么总结的MySQL的八股文。")])]),v._v(" "),_("p",[_("strong",[v._v("我：")]),v._v(" 要知道MySQL索引底层数据结构为啥用B+树，先要了解一下什么样的数据结构更适合建索引。")]),v._v(" "),_("p",[v._v("为了保证数据安全性，一般都是把数据存储在磁盘里面。当我们需要查询数据的时候，需要读取磁盘，就产生了磁盘IO，相比较内存操作，磁盘IO读取速度是非常慢的。")]),v._v(" "),_("p",[v._v("由于所需数据可能在磁盘并不是连续的，一次数据查询就需要多次磁盘IO，所以就需要我们设计的索引数据结构尽可能的减少磁盘IO次数。")]),v._v(" "),_("p",[v._v("再了解一下这几种二叉树的特性，以及优缺点，就知道哪种数据结构更适合建索引。")]),v._v(" "),_("p",[_("strong",[v._v("什么是二叉搜索树：")])]),v._v(" "),_("ol",[_("li",[v._v("若左子树不空，则左子树上所有结点的值均小于它的根结点的值；")]),v._v(" "),_("li",[v._v("若右子树不空，则右子树上所有结点的值均大于它的根结点的值；")]),v._v(" "),_("li",[v._v("左、右子树也分别为二叉查找树；")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img2022.cnblogs.com/blog/734446/202206/734446-20220623214430781-328608204.png",alt:""}})]),v._v(" "),_("p",[v._v("二叉搜索树查找数据的时间复杂度是O(logN)，如图所示，最多查找3次就可以查到所需数据。")]),v._v(" "),_("p",[v._v("理想很丰满，现实很骨感。极端情况下，二叉查找树可能退化成线性链表。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img2022.cnblogs.com/blog/734446/202206/734446-20220623214442089-98794027.png",alt:""}})]),v._v(" "),_("p",[v._v("链表的查找时间复杂度是O(N)，这时候最多需要7次才能查到所需数据。")]),v._v(" "),_("p",[v._v("该怎么办呢？于是我们就想到了给二叉树加一些限制条件，平衡一下左右子树，然后就引申出了很多平衡树：平衡二叉查找树、红黑树、B树、B+树。咱们分别说一下这几种树的优缺点，看哪种树最适合做索引。")]),v._v(" "),_("p",[_("strong",[v._v("什么是红黑树？")])]),v._v(" "),_("ol",[_("li",[v._v("结点是红色或黑色")]),v._v(" "),_("li",[v._v("根结点是黑色")]),v._v(" "),_("li",[v._v("所有叶子都是黑色（叶子是NIL结点）")]),v._v(" "),_("li",[v._v("每个红色结点的两个子结点都是黑色（从每个叶子到根的所有路径上不能有两个连续的红色结点）")]),v._v(" "),_("li",[v._v("从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img2022.cnblogs.com/blog/734446/202206/734446-20220623214459499-2073426020.png",alt:""}})]),v._v(" "),_("p",[v._v("看蒙了没有？")]),v._v(" "),_("p",[v._v("这么多复杂的规则，就是为了保证从根节点到叶子节点的最长路径不超过最短路径的2倍。")]),v._v(" "),_("p",[v._v("当插入节点或者删除节点的时候，为了满足红黑树规则，可能需要变色和旋转，这是一个复杂且耗时的过程。")]),v._v(" "),_("p",[_("strong",[v._v("红黑树的优点：")]),v._v("\n限制了左右子树的树高，不会相差过大。")]),v._v(" "),_("p",[_("strong",[v._v("缺点：")]),v._v("\n规则复杂，一般人想要弄懂这玩意儿，就已经很费劲了，更别说使用了。")]),v._v(" "),_("p",[_("strong",[v._v("什么是B树？")])]),v._v(" "),_("p",[v._v("我们知道，树的高度越高，查找次数越多，也就是磁盘IO次数越多，耗时越长，\n我们能不能想办法降低树的高度，把二叉树变成N叉树？于是B树就来了。")]),v._v(" "),_("p",[_("strong",[v._v("对于一个m阶的B树：")])]),v._v(" "),_("ol",[_("li",[v._v("根节点至少有2个子节点")]),v._v(" "),_("li",[v._v("每个中间节点都包含k-1个元素和k个子节点，其中 m/2 <= k <= m")]),v._v(" "),_("li",[v._v("每个叶子节点都包含k-1个元素，其中 m/2 <= k <= m")]),v._v(" "),_("li",[v._v("中间节点的元素按照升序排列")]),v._v(" "),_("li",[v._v("所有的叶子结点都位于同一层")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img2022.cnblogs.com/blog/734446/202206/734446-20220623214513663-443174334.png",alt:""}})]),v._v(" "),_("p",[v._v("根节点（8）有两个子节点，左子节点（3 5）和右子节点（11 15）。\n左子节点（3 5）中有2个元素和3个子节点。\n元素是3和5，按照升序排列。\n子节点是（1 2）、（4）、（6 7），\n而（1 2）中元素小于3，（4）中的元素在3和5中间，（6 7）的元素大于5，符合B树特征。")]),v._v(" "),_("p",[v._v("B树这样的设计有哪些优点呢？")]),v._v(" "),_("p",[v._v("高度更低，每个节点含有多个元素，查找的时候一次可以把一个节点中的所有元素加载到内存中作比较，两种改进都大大减少了磁盘IO次数。")]),v._v(" "),_("p",[_("strong",[v._v("什么是B+树？")])]),v._v(" "),_("p",[v._v("相比较B树，B+树又做了如下约定：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("有k个子节点的中间节点就有k个元素（B树中是k-1个元素），也就是子节点数量 = 元素数量。\n每个元素不保存数据，只用来索引，所有数据都保存在叶子节点。")])]),v._v(" "),_("li",[_("p",[v._v("所有的中间节点元素都同时存在于子节点，在子节点元素中是最大（或最小）元素。")])]),v._v(" "),_("li",[_("p",[v._v("非叶子节点只保存索引，不保存数据。（B树中两者都保存）")])]),v._v(" "),_("li",[_("p",[v._v("叶子结点包含了全部元素的信息，并且叶子结点按照元素大小组成有序列表。")])])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img2022.cnblogs.com/blog/734446/202206/734446-20220623214527489-1445296935.png",alt:""}})]),v._v(" "),_("p",[v._v("B+树这样设计有什么优点呢？")]),v._v(" "),_("ol",[_("li",[v._v("每个节点存储的元素更多，看起来比B树更矮胖，导致磁盘IO次数更少。")]),v._v(" "),_("li",[v._v("非叶子节点不存储数据，只存储索引，叶子节点存储全部数据。\n这样设计导致每次查找都会查到叶子节点，效率更稳定，便于做性能优化。")]),v._v(" "),_("li",[v._v("叶子节点之间使用有序链表连接。\n这样设计方便范围查找，只需要遍历链表中相邻元素即可，不再需要二次遍历二叉树。")])]),v._v(" "),_("p",[v._v("很明显，B树和B+树就是为了文件检索系统设计的，更适合做索引结构。")]),v._v(" "),_("p",[_("strong",[v._v("面试官：")]),v._v(" 还得是你，就你总结的全，我都想不那么全，明天来上班吧，薪资double。")]),v._v(" "),_("h3",{attrs:{id:"本文知识点总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本文知识点总结"}},[v._v("#")]),v._v(" 本文知识点总结：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://img2022.cnblogs.com/blog/734446/202206/734446-20220623214544844-432671952.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("文章持续更新，可以微信搜一搜「 一灯架构 」第一时间阅读更多技术干货。")])])])}),[],!1,null,null,null);_.default=l.exports}}]);