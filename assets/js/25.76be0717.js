(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{350:function(t,a,s){"use strict";s.r(a);var v=s(4),n=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("上篇文章我们讲了synchronized的用法和实现原理，我们总爱说synchronized是重量级锁，volatile是轻量级锁。为什么volatile是轻量级锁，体现在哪些方面？以及volatile的作用和实现原理是怎样的？本篇带你一块学习一下。")]),t._v(" "),a("h2",{attrs:{id:"_1-volatile是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-volatile是什么"}},[t._v("#")]),t._v(" 1. volatile是什么？")]),t._v(" "),a("p",[t._v("volatile是Java提供的一种轻量级的同步机制。与synchronized修饰方法、代码块不同，volatile只用来修饰变量。并且与synchronized、ReentrantLock等重量级锁不同的是，volatile更轻量级，因为它不会引起线程上下文的切换和调度。")]),t._v(" "),a("h2",{attrs:{id:"_2-volatile的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-volatile的作用"}},[t._v("#")]),t._v(" 2. volatile的作用")]),t._v(" "),a("p",[t._v("说volatile作用之前，先说一下并发编程的三大特性：原子性、可见性和有序性。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("原子性")]),t._v(" "),a("p",[t._v("即一个或者多个操作作为一个整体，要么全部执行，要么都不执行，并且操作在执行过程中不会被线程调度机制打断；而且这种操作一旦开始，就一直运行到结束，中间不会有任何上下文切换。")])]),t._v(" "),a("li",[a("p",[t._v("可见性")]),t._v(" "),a("p",[t._v("可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。")])]),t._v(" "),a("li",[a("p",[t._v("有序性")]),t._v(" "),a("p",[t._v("为了提高程序的执行效率，编译器会对编译后的指令进行重排序，即"),a("strong",[t._v("代码的编写顺序不一定就是代码的执行顺序")]),t._v("。")])])]),t._v(" "),a("p",[t._v("并发编程中只有同时满足这三大特性，才能保证程序正确的执行。而volatile的只保证了可见性和有序性，不保证原子性。")]),t._v(" "),a("p",[t._v("volatile的作用只有两个：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("保证内存的可见性")])]),t._v(" "),a("li",[a("p",[t._v("禁止JVM内存重排序（保证有序性）")])])]),t._v(" "),a("p",[t._v("在并发多线程情况下，为什么会有可见性问题？如果不做控制，为什么一个线程修改了共享变量的值，其他线程不能立即看到？这就需要聊到JMM（Java内存模型，Java Memory Model）。")]),t._v(" "),a("h2",{attrs:{id:"_3-jmm是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-jmm是什么"}},[t._v("#")]),t._v(" 3. JMM是什么")]),t._v(" "),a("p",[t._v("JMM（Java内存模型，Java Memory Model）定义程序访问变量的规范，为了屏蔽不同操作系统之间的差异。")]),t._v(" "),a("p",[t._v("由于Java共享变量是存储在主内存中，而Java线程无法直接访问主内存中数据，只能把主内存中的数据读到本地内存（相当于拷贝一份副本），修改完本地内存的数据，再写回主内存。而此时另一个线程也把主内存的数据拷贝到自己私有的本地内存中，虽然线程1已经修改了主内存从数据，线程2却无法感知到，所以就出现了内存可见性问题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/alsc/Documents/yideng-article/src/main/java/com/yideng/blog/img/image-20221005221629750.png",alt:"image-20221005221629750"}})]),t._v(" "),a("h2",{attrs:{id:"_4-可见性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-可见性问题"}},[t._v("#")]),t._v(" 4. 可见性问题")]),t._v(" "),a("p",[t._v("JMM定义的这套模型，会有可见性问题。当线程1修改了本地内存的数据，并刷会主内存中，其他线程中本地内存的数据并没有变化。也就是一个线程修改了共享变量的值，其他线程无法立即感知到。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/alsc/Documents/yideng-article/src/main/java/com/yideng/blog/img/image-20221005223544291.png",alt:"image-20221005223544291"}})]),t._v(" "),a("p",[t._v("像上图的流程，两个线程都把count=0的变量拷贝到自己私有的本地内存中，线程1把count的值修改为1，并写回主内存，而线程2本地内存的count值还是0。")]),t._v(" "),a("p",[t._v("那么volatile是怎么解决可见性问题呢？")]),t._v(" "),a("p",[t._v("volatile主要通过汇编lock前缀指令，它会锁定当前内存区域的缓存（缓存行），并且立即将当前缓存行数据写入主内存（耗时非常短），回写主内存的时候会通过MESI协议使其他线程缓存了该变量的地址失效，从而导致其他线程需要重新去主内存中重新读取数据到其工作线程中。")]),t._v(" "),a("p",[t._v("什么是MESI协议？")]),t._v(" "),a("p",[t._v("MESI协议（Modified Exclusive Shared Or Invalid）是各处理器访问缓存时都遵循一致性协议。核心思想是：")]),t._v(" "),a("blockquote",[a("p",[t._v("当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。")])]),t._v(" "),a("p",[t._v("MESI分别代表缓存行数据所处的四种状态，通过对这四种状态的切换，来达到对缓存数据进行管理的目的。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("状态")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("监听任务")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("M 修改（Modify）")]),t._v(" "),a("td",[t._v("该缓存行有效，数据被修改了，和内存中的数据不一致，数据只存在于本缓存行中")]),t._v(" "),a("td",[t._v("缓存行必须时刻监听所有试图读该缓存行相对应的内存的操作，其他缓存须在本缓存行写回内存并将状态置为E之后才能操作该缓存行对应的内存数据")])]),t._v(" "),a("tr",[a("td",[t._v("E 独享、互斥（Exclusive）")]),t._v(" "),a("td",[t._v("该缓存行有效，数据和内存中的数据一致，数据只存在于本缓存行中")]),t._v(" "),a("td",[t._v("缓存行必须监听其他缓存读主内存中该缓存行相对应的内存的操作，一旦有这种操作，该缓存行需要变成S状态")])]),t._v(" "),a("tr",[a("td",[t._v("S 共享（Shared）")]),t._v(" "),a("td",[t._v("该缓存行有效，数据和内存中的数据一致，数据同时存在于其他缓存中")]),t._v(" "),a("td",[t._v("缓存行必须监听其他缓存是该缓存行无效或者独享该缓存行的请求，并将该缓存行置为I状态")])]),t._v(" "),a("tr",[a("td",[t._v("I 无效（Invalid）")]),t._v(" "),a("td",[t._v("该缓存行数据无效")]),t._v(" "),a("td",[t._v("无")])])])]),t._v(" "),a("p",[t._v("而MESI协议是通过总线嗅探技术实现的：")]),t._v(" "),a("p",[t._v("总线嗅探是通过CPU侦听总线上发生的数据交换操作，当总线上发生了数据操作，那么总线就会广播对应的通知，CPU收到通知后，再根据本地的情况进行响应。")]),t._v(" "),a("h2",{attrs:{id:"_5-有序性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-有序性问题"}},[t._v("#")]),t._v(" 5. 有序性问题")]),t._v(" "),a("p",[t._v("虚拟机在进行代码编译时，对改变顺序后不会对最终结果造成影响的代码，虚拟机不一定会按我们写的代码顺序运行，有可能进行重排序。实际上虽然重排后不会对变量值有影响，但会造成线程安全问题。")]),t._v(" "),a("p",[a("strong",[t._v("重排序")]),t._v("又可以分为三种：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("编译器")]),t._v("优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序")]),t._v(" "),a("li",[a("strong",[t._v("指令级")]),t._v("并行的重排序。现代CPU采用了指令级并行技术来将多条指令重叠执行。对于不存在数据依赖的指令，CPU可以改变语句对应机器指令的执行顺序")]),t._v(" "),a("li",[a("strong",[t._v("内存系统")]),t._v("的重排序。由于CPU使用三级缓存结构，这使得数据加载和存储操作看上去可能是在乱序执行的")])]),t._v(" "),a("p",[t._v("不过重排序也不是随便重排的，发生指令重排序的前提是："),a("strong",[t._v("在单线程下不影响执行结果、对没有数值依赖的代码进行重排序")]),t._v("。这就是"),a("strong",[t._v("as-if-serial")]),t._v("语义。在多线程情况下有一套更具体的规则，那就是"),a("strong",[t._v("happens-before")]),t._v("原则。")]),t._v(" "),a("p",[t._v("happens-before由以下八大原则组成：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("程序次序规则")]),t._v("：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作（线程的"),a("strong",[t._v("执行结果有序")]),t._v("）")]),t._v(" "),a("li",[a("strong",[t._v("锁定规则")]),t._v("：一个unlock操作先行发生于后面对"),a("strong",[t._v("同一个锁")]),t._v("的lock操作")]),t._v(" "),a("li",[a("strong",[t._v("volatile变量规则")]),t._v("：对一个volatile变量的写操作先行发生于后面对这个变量的读操作")]),t._v(" "),a("li",[a("strong",[t._v("传递规则")]),t._v("：如果操作A先行发生于操作B，操作B先行发生于操作C，则可以得出操作A先行发生于操作C")]),t._v(" "),a("li",[a("strong",[t._v("线程启动规则")]),t._v("：Thread对象的start()方法先行发生于该线程的其他任何操作")]),t._v(" "),a("li",[a("strong",[t._v("线程中断规则")]),t._v("：对线程中断方法interrupt()的调用先行发生于被中断线程检测到中断事件的发生")]),t._v(" "),a("li",[a("strong",[t._v("线程终结规则")]),t._v("：线程中所有操作先行发生于线程的终止检测。通过Thread.join()方法结束、Thread.isAlive()方法的返回值等手段检测到线程已经终止执行。比如在A线程中调用B.join()方法，B线程执行完成后，B对共享变量的修改，对A来说是可见的")]),t._v(" "),a("li",[a("strong",[t._v("对象终结规则")]),t._v("：一个对象的初始化方法完成先行发生于该对象的finalize()方法的开始")])]),t._v(" "),a("p",[t._v("如果两个操作不满足上述八大原则中的任意一个，那么这两个操作就没有顺序保证，虚拟机可以对这两个操作进行重排序。如果操作A happens-before 操作B，那么A在内存所做的修改对B都是可见的。")]),t._v(" "),a("p",[t._v("而volatile是通过插入"),a("strong",[t._v("内存屏障（Memory Barrier）")]),t._v("，在内存屏障前后禁止重排序优化，以此实现有序性。")]),t._v(" "),a("p",[t._v("内存屏障有两个作用：一是"),a("strong",[t._v("保证特定操作的执行顺序")]),t._v("，二是"),a("strong",[t._v("保证某些变量的内存可见性。")])]),t._v(" "),a("p",[a("strong",[t._v("volatile内存语义的实现：")]),t._v(" JMM 针对编译器制定的 volatile 重排序规则表")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("操作")]),t._v(" "),a("th",[t._v("普通读写")]),t._v(" "),a("th",[t._v("volatile读")]),t._v(" "),a("th",[t._v("volatile写")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("普通读写")])]),t._v(" "),a("td",[t._v("可以重排")]),t._v(" "),a("td",[t._v("可以重排")]),t._v(" "),a("td",[t._v("不可以重排")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("volatile读")])]),t._v(" "),a("td",[t._v("不可以重排")]),t._v(" "),a("td",[t._v("不可以重排")]),t._v(" "),a("td",[t._v("不可以重排")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("volatile写")])]),t._v(" "),a("td",[t._v("可以重排")]),t._v(" "),a("td",[t._v("不可以重排")]),t._v(" "),a("td",[t._v("不可以重排")])])])]),t._v(" "),a("p",[t._v("编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序：")]),t._v(" "),a("ul",[a("li",[t._v("在每个volatile写操作的前面插入一个StoreStore屏障")]),t._v(" "),a("li",[t._v("在每个volatile写操作的后面插入一个StoreLoad屏障")]),t._v(" "),a("li",[t._v("在每个volatile读操作的后面插入一个LoadLoad屏障")]),t._v(" "),a("li",[t._v("在每个volatile读操作的后面插入一个LoadStore屏障")])]),t._v(" "),a("h2",{attrs:{id:"_6-volatile应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-volatile应用场景"}},[t._v("#")]),t._v(" 6. volatile应用场景")]),t._v(" "),a("p",[t._v("volatile可以保证可见性和有序性，但无法保证原子性。所以它的应用场景就不如synchronized广泛，主要有两个场景：一是做状态变量，二是做需要重新赋值的共享对象。")]),t._v(" "),a("p",[t._v("比如：第二种场景常见的就有修饰单例模式的对象。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用volatile修饰，赋值后，其他线程能立即感知到")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("还有就是CopyOnWriteArrayList的底层实现就是用volatile修饰的数组，因为CopyOnWriteArrayList每次修改数据后都会数组重新赋值，而不是只修改数据中的一个值，这样才能保证了CopyOnWriteArrayList的数据安全性。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Users/alsc/Documents/yideng-article/src/main/java/com/yideng/blog/img/image-20221005234841180.png",alt:"image-20221005234841180"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);